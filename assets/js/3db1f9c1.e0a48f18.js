"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5058],{7820:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=n(4848),r=n(8453);const s={},i="Mod",l={id:"lua-api/classes/mod",title:"Mod",description:"The Mod class is responsible for interacting with the local mod object.",source:"@site/versioned_docs/version-3.0.1/lua-api/classes/mod.md",sourceDirName:"lua-api/classes",slug:"/lua-api/classes/mod",permalink:"/RE-UE4SS/lua-api/classes/mod",draft:!1,unlisted:!1,editUrl:"https://github.com/UE4SS-RE/RE-UE4SS/edit/main/docs/lua-api/classes/mod.md",tags:[],version:"3.0.1",frontMatter:{},sidebar:"docs",previous:{title:"LocalUnrealParam",permalink:"/RE-UE4SS/lua-api/classes/localunrealparam"},next:{title:"ObjectProperty",permalink:"/RE-UE4SS/lua-api/classes/objectproperty"}},c={},d=[{value:"Inheritance",id:"inheritance",level:2},{value:"Methods",id:"methods",level:2},{value:"SetSharedVariable(string VariableName, any Value)",id:"setsharedvariablestring-variablename-any-value",level:3},{value:"GetSharedVariable(string VariableName)",id:"getsharedvariablestring-variablename",level:3},{value:"type()",id:"type",level:3}];function o(e){const a={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h1,{id:"mod",children:"Mod"}),"\n",(0,t.jsxs)(a.p,{children:["The ",(0,t.jsx)(a.code,{children:"Mod"})," class is responsible for interacting with the local mod object."]}),"\n",(0,t.jsx)(a.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.a,{href:"/RE-UE4SS/lua-api/classes/remoteobject",children:"RemoteObject"})}),"\n",(0,t.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(a.h3,{id:"setsharedvariablestring-variablename-any-value",children:"SetSharedVariable(string VariableName, any Value)"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Sets a variable that can be accessed by any mod."}),"\n",(0,t.jsxs)(a.li,{children:["The second parameter ",(0,t.jsx)(a.code,{children:"Value"})," can only be one of the following types: ",(0,t.jsx)(a.code,{children:"nil"}),", ",(0,t.jsx)(a.code,{children:"string"}),", ",(0,t.jsx)(a.code,{children:"number"}),", ",(0,t.jsx)(a.code,{children:"bool"}),", ",(0,t.jsx)(a.code,{children:"UObject"})," (+derivatives), ",(0,t.jsx)(a.code,{children:"lightuserdata"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"Warning: These variables do not get reset when hot-reloading."}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Example"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-lua",children:"-- When sharing a UObject, make absolutely sure that it's a UObject that doesn't cease to exist before it's used again.\r\n-- It's a very bad idea to share transient objects like actors as they might die and stop existing.\r\nlocal StaticObject = StaticFindObject(\"/Script/Engine.Default__GameplayStatics\")\r\n\r\n-- The 'ModRef' variable is a global variable that's automatically created and is the instance of the current mod.\r\nModRef:SetSharedVariable(\"MyVariable\", StaticObject)\n"})}),"\n",(0,t.jsx)(a.h3,{id:"getsharedvariablestring-variablename",children:"GetSharedVariable(string VariableName)"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Return type:"})," ",(0,t.jsx)(a.code,{children:"any"})]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Returns:"})," a variable that could've been set from another mod."]}),"\n",(0,t.jsxs)(a.li,{children:["The return value can only be one of the following types: ",(0,t.jsx)(a.code,{children:"nil"}),", ",(0,t.jsx)(a.code,{children:"string"}),", ",(0,t.jsx)(a.code,{children:"number"}),", ",(0,t.jsx)(a.code,{children:"bool"}),", ",(0,t.jsx)(a.code,{children:"UObject"}),"(+derivatives), ",(0,t.jsx)(a.code,{children:"lightuserdata"}),"."]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Example"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-lua",children:'-- Assuming that the example script for \'SetSharedVariable\' has been executed.\r\nlocal SharedObject = ModRef:GetSharedVariable("MyVariable")\r\n\r\n-- \'GetSharedVariable\' may return anything that its able to store.\r\n-- Any mod is able to override the value for any shared variable.\r\nif SharedObject and type(SharedObject) == "userdata" and SharedObject:type() == "UObject" and SharedObject:IsValid() then\r\n    print(string.format("SharedObject \'%s\' is valid.\\n", SharedObject:GetFullName()))\r\nelse\r\n    print("SharedObject was nil, not userdata, not a UObject, or an invalid UObject")\r\nend\n'})}),"\n",(0,t.jsx)(a.h3,{id:"type",children:"type()"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Return type:"})," ",(0,t.jsx)(a.code,{children:"string"})]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Returns:"}),' "ModRef"']}),"\n"]})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var t=n(6540);const r={},s=t.createContext(r);function i(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);