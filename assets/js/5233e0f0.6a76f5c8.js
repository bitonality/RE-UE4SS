"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1893],{209:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var t=r(4848),o=r(8453);const i={},a="Generating UHT compatible headers",s={id:"guides/generating-uht-compatible-headers",title:"Generating UHT compatible headers",description:"Supported versions",source:"@site/versioned_docs/version-3.0.1/guides/generating-uht-compatible-headers.md",sourceDirName:"guides",slug:"/guides/generating-uht-compatible-headers",permalink:"/RE-UE4SS/guides/generating-uht-compatible-headers",draft:!1,unlisted:!1,editUrl:"https://github.com/UE4SS-RE/RE-UE4SS/edit/main/docs/guides/generating-uht-compatible-headers.md",tags:[],version:"3.0.1",frontMatter:{},sidebar:"docs",previous:{title:"Fixing missing AOBs",permalink:"/RE-UE4SS/guides/fixing-compatibility-problems"},next:{title:"Creating a C++ mod",permalink:"/RE-UE4SS/guides/creating-a-c++-mod"}},l={},d=[{value:"Supported versions",id:"supported-versions",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Possible inaccurate generation issues:",id:"possible-inaccurate-generation-issues",level:2},{value:"Instructions for possible errors you may encounter",id:"instructions-for-possible-errors-you-may-encounter",level:2},{value:"Inherited Virtuals",id:"inherited-virtuals",level:3},{value:"Game Target Generation",id:"game-target-generation",level:3},{value:"Deep Rock Galactic",id:"deep-rock-galactic",level:3},{value:"cyubeVR",id:"cyubevr",level:3},{value:"Game 3",id:"game-3",level:3},{value:"Astro Colony",id:"astro-colony",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"generating-uht-compatible-headers",children:"Generating UHT compatible headers"}),"\n",(0,t.jsx)(n.h2,{id:"supported-versions",children:"Supported versions"}),"\n",(0,t.jsxs)(n.p,{children:["While the UHT header generator is only officially supported in ",(0,t.jsx)(n.code,{children:"4.25+"}),", it has worked for older game versions (tested on ",(0,t.jsx)(n.code,{children:"4.18.3"}),"; ",(0,t.jsx)(n.code,{children:"4.17"})," (has some default property issues that should be fixed soon)). It also works for ",(0,t.jsx)(n.code,{children:"5.0+"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,t.jsxs)(n.p,{children:["The key bind to generate headers is by default ",(0,t.jsx)(n.code,{children:"CTRL"})," + ",(0,t.jsx)(n.code,{children:"Numpad 9"}),", and it can be changed in ",(0,t.jsx)(n.code,{children:"Mods/Keybinds/Scripts/main.lua"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To utilize the generated headers to their full potential, see ",(0,t.jsx)(n.a,{href:"https://github.com/Buckminsterfullerene02/UE4GameProjectGenerator",children:"UE4GameProjectGenerator"})," by Archengius (link to Buck's fork because of a couple fixes that Arch is too lazy to merge)."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["The project generator will only compile for UE versions ",(0,t.jsx)(n.code,{children:"4.22"})," and higher. Engine customizations by developers may lead to unexpected results.\r\nIf generating a project for an engine version older than ",(0,t.jsx)(n.code,{children:"4.22"}),", generate it by compiling the project generator for ",(0,t.jsx)(n.code,{children:"4.22"})," or higher first."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Before compiling the projectgencommandlet, open ",(0,t.jsx)(n.code,{children:"GameProjectGenerator.uproject"})," and your game's pluginmanifest or ",(0,t.jsx)(n.code,{children:".uproject"})," and add any default engine plugins used by the game or plugins that the game uses and you found open source or purchased (it is not recommended to include purchased plugins in a public uproject) to the commandlet's uproject file."]}),"\n",(0,t.jsxs)(n.p,{children:["After compiling the commandlet and running it on your game files, simply change the engine version in the generated ",(0,t.jsx)(n.code,{children:".uproject"})," to the correct engine version for your game."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://user-images.githubusercontent.com/73571427/184372672-60d8579e-51c3-4d1e-9839-73af5d96ff21.png",alt:"image"})}),"\n",(0,t.jsxs)(n.p,{children:["This ",(0,t.jsx)(n.a,{href:"https://cdn.discordapp.com/attachments/1005879578419531947/1075109443445985462/UE4ProjectGen-GUI.exe",children:"commandlet (by Spuds)"})," will enter the CLI commands for the project gen for you, and make a batch file to regenerate with the same settings (e.g., to regenerate after a major game update)."]}),"\n",(0,t.jsx)(n.h2,{id:"possible-inaccurate-generation-issues",children:"Possible inaccurate generation issues:"}),"\n",(0,t.jsx)(n.p,{children:"UE4SS has two different types of generators, a UHT compatible generator and what's called a CXX generator."}),"\n",(0,t.jsxs)(n.p,{children:["The UHT compatible generator is what's used when creating a ",(0,t.jsx)(n.code,{children:".uproject"})," file with the UE4GameProjectGenerator, and the CXX generator is a very shoddily made generator that doesn't generate UHT macros or proper ",(0,t.jsx)(n.code,{children:"#include"})," statements but it does generate headers for core UE classes which the UHT generator doesn't."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note the UE4SS CXX dumps do not currently have accurate padding.  An SDK dump generated from another source may be a better source for determining the below corrections if it generates with correct padding, particularly for the bitfield checks."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Certain default properties may not generate correctly in older engine versions. For example, ",(0,t.jsx)(n.code,{children:"SoftObjectProperty"})," was called ",(0,t.jsx)(n.code,{children:"AssetObjectProperty"})," and ",(0,t.jsx)(n.code,{children:"SoftClassProperty"})," was ",(0,t.jsx)(n.code,{children:"AssetClassProperty"})," in <",(0,t.jsx)(n.code,{children:"4.17"}),". It is recommended to also generate an SDK/CXX dump to check for those properties and correct them in your project."]}),"\n",(0,t.jsxs)(n.p,{children:["Bitfields will always generate as ",(0,t.jsx)(n.code,{children:"uint8"}),". However, they may actually be declared as ",(0,t.jsx)(n.code,{children:"uint32"})," in the original source. You can try to determine the actual size based on the CXX/SDK dump to correct these. In a CXX dump the bitfields will show the same offset. If there are multiple bitfields at the same offset and the next property is 4 bytes after that offset, then the bitfield should be changed to uint32."]}),"\n",(0,t.jsx)(n.h2,{id:"instructions-for-possible-errors-you-may-encounter",children:"Instructions for possible errors you may encounter"}),"\n",(0,t.jsx)(n.p,{children:"These are some general instructions of how to generate a project and it also covers a few errors that you are likely to encounter."}),"\n",(0,t.jsx)(n.p,{children:"The following errors & solutions is what was found when generating projects for various games."}),"\n",(0,t.jsx)(n.p,{children:"Note that you can check here for solutions even if your game isn't listed below. Error lists compiled by Buckminsterfullerene, CheatingMuppet, Narknon & Blubb."}),"\n",(0,t.jsx)(n.h3,{id:"inherited-virtuals",children:"Inherited Virtuals"}),"\n",(0,t.jsxs)(n.p,{children:["UE4SS is unable to generate inherited virtuals if they are unreflected. This is often the source of ",(0,t.jsx)(n.code,{children:"LNK2001: unresolved external symbol"})," errors, particularly when a class inherits from an interface. The build log is often not helpful for determining which file needs these virtuals."]}),"\n",(0,t.jsxs)(n.p,{children:["To determine the file that they need to be added to, search for the virtual function listed in the error or for the class of the function in the engine, e.g., ",(0,t.jsx)(n.code,{children:'Module.AkAudio.cpp.obj : error LNK2001: unresolved external symbol "public: virtual class FString const __cdecl UInterpTrack::GetEdHelperClassName(void)const'})," you could search for ",(0,t.jsx)(n.code,{children:"GetEdHelperClassName"})," or ",(0,t.jsx)(n.code,{children:"UInterpTrack"}),". Find the parent function and then find any classes within your project that inherit from same. Ideally find a sample of another class that inherits those virtuals within the engine on which to base your fixes, and copy the implementations from same into your affected project files, being sure to change the class name to match the class in your project."]}),"\n",(0,t.jsx)(n.p,{children:'You typically will also want to delete the logic in the implementations to simply return the correct type of data or "null" without actually running any logic.'}),"\n",(0,t.jsx)(n.h3,{id:"game-target-generation",children:"Game Target Generation"}),"\n",(0,t.jsxs)(n.p,{children:["The project gen commandlet does not generate a game target file. Copy and duplicate your ",(0,t.jsx)(n.code,{children:"GameNameEditor.target.cs"}),' file in the same location. Remove Editor from the name. Open the file and delete "Editor" in the red crossed locations, and replace "Editor" with "Game" in the highlighted location.']}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://user-images.githubusercontent.com/73571427/184372165-a365e6a9-4665-469d-a481-ef2b300240e7.png",alt:"image"})}),"\n",(0,t.jsx)(n.h3,{id:"deep-rock-galactic",children:"Deep Rock Galactic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"========================== First do: ==========================\r\nGenerate project using commandlet\r\nThen open it in Rider/VS.\r\n\r\n========================== Then do, in no particular order: ==========================\r\nFind out what version of mod.io game currently uses. At time of writing it is https://github.com/modio/modio-ue4/releases/tag/v2.16.1792. Delete the existing 'Modio' folder first. Paste the 'Modio', 'ModioTests' and 'ThirdParty' folders from this into Plugins/Modio/Source, replacing the existing 'Modio' folder. Do not replace the .uplugin file. Delete the ModioEx section form the .uplugin file instead.\r\n\r\nIn:\r\n- CharacterSightSensor.h, FCharacterSightSensorDelegates\r\nDECLARE_DYNAMIC_MULTICAST_DELEGATE(FCharacterSightSensorDelegate);\r\n- FSDProjectileMovementComponent.h top delegates\r\nDECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnProjectilePenetrateDelegate);\r\nDECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnProjectileOutOfPropulsion);\r\nAdd the macro DECLARE_DYNAMIC_MULTICAST_DELEGATE(<\\DelegateName>); above the UCLASS\r\n\r\nIn:\r\n- SubHealthComponent.h, line 56\r\n- HealthComponentBase.h, line 117\r\n- HealthComponent.h, line 98\r\n- EnemyHealthComponent.h, line 39\r\n- FriendlyHealthComponent.h, line 33\r\nComment out UFUNCTION\r\n\r\nErrors that look like this: \"ActorFunctionLibrary.gen.cpp(153): [C2664] 'void UActorFunctionLibrary::DissolveMaterials(UObject *,const UMeshComponent *&,float)': cannot convert argument 2 from 'UMeshComponent *' to 'const UMeshComponent *&'\":\r\nRemove the const before the arguments that have the error (remember to also remove them in the definition stub too)\r\nOR use this regex string (const) ((\\w+)\\*\\&) and replace with $2\r\n\r\nIn \"ShowroomStage.cpp\" inside of the implementation of the constructor, comment out \"this->SceneCapture = CreateDefaultSubobject<\\USceneCaptureComponent2D>(TEXT(\"SceneCapture\"));\" \r\n\r\nSet supported platforms to windows\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cyubevr",children:"cyubeVR"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Add the following 4 lines in the "Plugins" section in the generated "cyubeVR.uproject":\r\n{\r\n    "Name": "ChaosEditor",\r\n    "Enabled": false\r\n}\r\n\r\nCopy and paste the cyubeVREditor.Target.cs file (inside Source folder) and name it cyubeVRGame.Target.cs. Then replace any mentions of "editor" and replace with "game" inside of this new file\r\n\r\nRight click generated project and open with IDE (e.g. Rider)\r\n\r\nComment out UFUNCTION() in ReceiveLightActor.h\r\n    - UseActorCustomLocation\r\n    - GetActorCustomLocation\r\n\r\nSet the "_MAX UMETA(Hidden)," to "_MAX = 0xFF UMETA(Hidden)," in:\r\n    - EUGCMatchingUGCTypeBP.h\r\n    - EItemPreviewTypeBP.h\r\n\r\nRemove the constructor from IpNetDriverUWorks.h and cpp files.\r\n\r\nRemove TEnumAsByte<> (but not the type inside of it) in:\r\n    - OnInput inside VRGripInterface.h\r\n    - OnEndPlay inside VRGripScriptBase.h and its _Implementation version in the .cpp file\r\n    - SetMobilityAllEvent inside DeerCPP.h and its _Implementation version in the .cpp file\r\n\r\nThen right click the .uproject and hit "regenerate solution files".\r\n\r\nIf you get the "failed to create version memory for PCH" errors when trying to build or pack, do it again.\n'})}),"\n",(0,t.jsx)(n.h3,{id:"game-3",children:"Game 3"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Error 1\r\nIn an Enum class:\r\nSystem.ArgumentException - String cannot contain a minus sign if the base is not 10.\r\n\r\nFix:\r\nRemove the BlueprintType meta tag and the uint8 override on the enum ': uint8'.\r\n\r\n\r\nError 2\r\nUnable to find 'class', 'delegate', 'enum', or 'struct' with name 'XYZ', where XYZ is an FStruct used within a class with no separate UStruct declaration.\r\n\r\nFix:\r\nDECLARE_DYNAMIC_MULTICAST_DELEGATE(XYZ); , close to the Top of header Files.\r\n\r\n\r\nError 3\r\n\"is not supported by blueprint.\"\r\n\r\nFix:\r\n-> Remove BlueprintReadWrite\r\n-> or Remove BlueprintCallable\r\n\r\n\r\nError 4\r\ncannot instantiate abstract class\r\n\r\nfix:\r\n\r\ncpp looks like:\r\n\r\n UAbilitySystemComponent* AActorWithGAS::GetAbilitySystemComponent() const {\r\n    return nullptr;\r\n }\r\n \r\n Go to Header File and add:\r\n \r\n UAbilitySystemComponent* GetAbilitySystemComponent() const override;\r\n\r\n\r\nError 5\r\nmodifiers not allowed on static member functions\r\n\r\nFix: \r\nRemove the modifier, like \"const\"\r\n\r\nExample:\r\nstatic TSoftObjectPtr<Test> SomeFunction(some args) const;  <- remove const\r\n\r\nIn both h and cpp File.\r\n\r\n\r\nError 6\r\n'AAkAMbientSound' no appropriate default consturctor available.\r\n\r\nFix:\r\n-------\r\nHeader File\r\n-------\r\nAkAmbientSound();\r\n\r\n->\r\n\r\nAkAmbientSound(const class FObjectInitializer& ObjectInitializer);\r\n\r\n-------\r\nCPP File\r\n-------\r\nAkAmbientSound::AkAmbientSound() {\r\n    this->AkEvent = NULL;\r\n}\r\n\r\n->\r\n\r\nAkAmbientSound::AkAmbientSound(const class FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)  {\r\n    this->AkEvent = NULL;\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"astro-colony",children:"Astro Colony"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'========================== First do: ==========================\r\nGenerate project using commandlet\r\nThen open it in Rider/VS.\r\n\r\n========================== Then do, in no particular order: ==========================\r\nCopy the EditorTarget file, rename it to AstroColonyGame.Target, and inside of it change target type to Game\r\n\r\nIn:\r\n- VoxelPhysicsPartSpawner_VoxelWorlds.h, FConfigureVoxelWorld;\r\n- TGNamedSlot.h, FOnNamedSlotAdded/Removed\r\n- EHLogicObject.h, FOnSelectedResourcesChanged\r\n- EHSignalObject.h, FOnResourcesSignalOutChanged/FOnSelectedDeviceChanged\r\n- EHInteractableServiceObject, FOnAIInsideChanged\r\n- EHModsBrowsedOptionViewModel, FOnInstalProgressChanged/FOnInstalCompleted\r\n- EHSaveLoadListViewModel, FOnScenarioDetailsUpdated\r\n- EHTrainingObject, FOnTrainedChanged\r\n- EHSchoolObject, FOnAwaitingSpecialistTrainingsChange\r\n- EHSignalReceiver, FOnSignalSendChanged\r\n- EHModsListViewModel, FOnModsOptionSelected\r\n- EHSignalNetwork, FOnSignalChanged\r\n- AbilityAsync_WaitGameplayTagAdded, FAsyncWaitGameplayTagDelegate (put it inside of AbilityAsync_WaitGameplayTag)\r\nAdd the macro DECLARE_DYNAMIC_MULTICAST_DELEGATE(<\\DelegateName>); above the UCLASS\r\n\r\nIn: \r\n- AbilityAsync_WaitGameplayTagRemoved.h\r\n- AbilityAsync_WaitGameplayTagAdded.h\r\nRemove the UAbilityAsync_WaitGameplayTag:: from the front of each member\r\n\r\nIn EHSummaryViewModel.h add #include "EHSaveLoadListViewModel.h"\r\n\r\nIn:\r\n- MaterialExpressionBlendMaterialAttributesBarycentric.h (every property)\r\n- MaterialExpressionUnpack.h (FExpressionInput Input)\r\n- GameplayCueInterface.h (ForwardGameplayCueToParent)\r\nremove BlueprintReadWrite/BlueprintCallable (where appropriate) flag from the \'UPROPERTY\' macro.\r\n\r\nIn MaterialPackInput.h, add #include "MaterialExpressionIO.h" and remove BlueprintReadWrite flag from the \'UPROPERTY\' macro for FExpressionInput Input;\r\n\r\nIn EAbilityTaskWaitState.h, add None = 0 to the enum\r\n\r\nIn:\r\n- AbilityTask.h/.cpp\r\n- UMovieSceneGameplayCueTriggerSection\r\n- UMovieSceneGameplayCueSection\r\ncomment out the constructor/definition\r\n\r\nIn AbilitySystemComponent.h/.cpp, comment out:\r\n- The constructor\r\n- ServerSetReplicatedEventWithPayload\r\n- ServerSetReplicatedEvent\r\n- ClientSetReplicatedEvent\r\n\r\nIn EHBaseButtonWidget.h, add:\r\n#include "Components/HorizontalBox.h"\r\n#include "Components/BackgroundBlur.h"\r\n#include "Components/SizeBox.h"\r\nthen remove the forward declarations for UHorizontalBox, UBackgroundBlur, USizeBox. \r\nThen comment out\r\n\tUFUNCTION(BlueprintImplementableEvent)\r\n    void OnInputControllerChanged(TEnumAsByte<ETGInputControllerType> InputControllerType); \r\n\r\nIn:\r\n- EHPlanetoidDestructibleItem.h\r\n- EHPlanetoidVisualItem.h (also remove array from SpawnDensity)\r\n- EHGridComponent.h, BillboardTextures\r\n- EHHUDGame.h, PopMenuClasses/HUDMenuClasses (also change GetPopMenuClass return type)\r\n- EHScenarioParams.h, TerrainTypeSpawnChances/ShapeTypeSpawnChances\r\n- EHDataProvider.h, every array\r\nreplace the array decleration with TArray<> and add BlueprintReadWrite+other normal flags to the \'UPROPERTY\' macro. Then update the .cpp constructor.\r\n\r\nIn VoxelProceduralMeshComponent.h/.cpp, add the UPrimitiveComponent interface, i.e. like this:\r\nVoxelProceduralMeshComponent.h:\r\n#pragma once\r\n#include "CoreMinimal.h"\r\n#include "Components/ModelComponent.h"\r\n#include "VoxelIntBox.h"\r\n#include "VoxelProceduralMeshComponent.generated.h"\r\n\r\nclass UBodySetup;\r\nclass UStaticMeshComponent;\r\nclass AVoxelWorld;\r\nclass UModelComponent;\r\n\r\nUCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))\r\nclass VOXEL_API UVoxelProceduralMeshComponent : public UModelComponent {\r\n    GENERATED_BODY()\r\npublic:\r\nprivate:\r\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))\r\n    UBodySetup* BodySetup;\r\n    \r\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))\r\n    UBodySetup* BodySetupBeingCooked;\r\n    \r\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Export, Transient, meta=(AllowPrivateAccess=true))\r\n    UStaticMeshComponent* StaticMeshComponent;\r\n    \r\npublic:\r\n    UVoxelProceduralMeshComponent(const FObjectInitializer& ObjectInitializer);\r\n    UFUNCTION(BlueprintCallable)\r\n    static void SetVoxelCollisionsFrozen(const AVoxelWorld* VoxelWorld, bool bFrozen);\r\n    \r\n    UFUNCTION(BlueprintImplementableEvent)\r\n    void InitChunk(uint8 ChunkLOD, FVoxelIntBox ChunkBounds);\r\n    \r\n    UFUNCTION(BlueprintCallable, BlueprintPure)\r\n    static bool AreVoxelCollisionsFrozen(const AVoxelWorld* VoxelWorld);\r\n\r\n//~ Begin UPrimitiveComponent Interface.\r\n\tvirtual void CreateRenderState_Concurrent(FRegisterComponentContext* Context) override;\r\n\tvirtual void DestroyRenderState_Concurrent() override;\r\n\tvirtual bool GetLightMapResolution( int32& Width, int32& Height ) const override;\r\n\tvirtual int32 GetStaticLightMapResolution() const override;\r\n\tvirtual void GetLightAndShadowMapMemoryUsage( int32& LightMapMemoryUsage, int32& ShadowMapMemoryUsage ) const override;\r\n\tvirtual FBoxSphereBounds CalcBounds(const FTransform& LocalToWorld) const override;\r\n\tvirtual FPrimitiveSceneProxy* CreateSceneProxy() override;\r\n\tvirtual bool ShouldRecreateProxyOnUpdateTransform() const override;\r\n#if WITH_EDITOR\r\n\tvirtual void GetStaticLightingInfo(FStaticLightingPrimitiveInfo& OutPrimitiveInfo,const TArray<ULightComponent*>& InRelevantLights,const FLightingBuildOptions& Options) override;\r\n\tvirtual void AddMapBuildDataGUIDs(TSet<FGuid>& InGUIDs) const override;\r\n#endif\r\n\tvirtual ELightMapInteractionType GetStaticLightingType() const override\t{ return LMIT_Texture;\t}\r\n\tvirtual void GetStreamingRenderAssetInfo(FStreamingTextureLevelContext& LevelContext, TArray<FStreamingRenderAssetPrimitiveInfo>& OutStreamingRenderAssets) const override;\r\n\tvirtual void GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false) const override;\r\n\tvirtual class UBodySetup* GetBodySetup() override { return ModelBodySetup; };\r\n\tvirtual int32 GetNumMaterials() const override;\r\n\tvirtual UMaterialInterface* GetMaterial(int32 MaterialIndex) const override;\r\n\tvirtual UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32 FaceIndex, int32& SectionIndex) const override;\r\n\tvirtual bool IsPrecomputedLightingValid() const override;\r\n\t//~ End UPrimitiveComponent Interface.\r\n\r\n\t//~ Begin UActorComponent Interface.\r\n\tvirtual void InvalidateLightingCacheDetailed(bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly) override;\r\n\tvirtual void PropagateLightingScenarioChange() override;\r\n\t//~ End UActorComponent Interface.\r\n\r\n\t//~ Begin UObject Interface.\r\n\tvirtual void Serialize(FArchive& Ar) override;\r\n\tvirtual void PostLoad() override;\r\n\tvirtual bool IsNameStableForNetworking() const override;\r\n#if WITH_EDITOR\r\n\tvirtual void PostEditUndo() override;\r\n#endif // WITH_EDITOR\r\n\tstatic void AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector);\r\n\t//~ End UObject Interface.\r\n\r\n\t//~ Begin Interface_CollisionDataProvider Interface\r\n\tvirtual bool GetPhysicsTriMeshData(struct FTriMeshCollisionData* CollisionData, bool InUseAllTriData) override;\r\n\tvirtual bool ContainsPhysicsTriMeshData(bool InUseAllTriData) const override;\r\n\tvirtual bool WantsNegXTriMesh() override { return false; }\r\n\t//~ End Interface_CollisionDataProvider Interface\r\n\r\n//#if WITH_EDITOR\r\n\t/**\r\n\t *\tGenerate the Elements array.\r\n\t *\r\n\t *\t@param\tbBuildRenderData\tIf true, build render data after generating the elements.\r\n\t *\r\n\t *\t@return\tbool\t\t\t\ttrue if successful, false if not.\r\n\t */\r\n\tvirtual bool GenerateElements(bool bBuildRenderData);\r\n//#endif // WITH_EDITOR  \r\n};\r\n\r\nVoxelProceduralMeshComponent.cpp:\r\n#include "VoxelProceduralMeshComponent.h"\r\n\r\nclass AVoxelWorld;\r\n\r\nvoid UVoxelProceduralMeshComponent::SetVoxelCollisionsFrozen(const AVoxelWorld* VoxelWorld, bool bFrozen) {\r\n\r\n}\r\n\r\nbool UVoxelProceduralMeshComponent::AreVoxelCollisionsFrozen(const AVoxelWorld* VoxelWorld) {\r\n    return false;\r\n}\r\n\r\nUVoxelProceduralMeshComponent::UVoxelProceduralMeshComponent(const FObjectInitializer& ObjectInitializer)\r\n: Super(ObjectInitializer)\r\n{\r\n    this->BodySetup = NULL;\r\n    this->BodySetupBeingCooked = NULL;\r\n    this->StaticMeshComponent = NULL;\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)\r\n{\r\n\t/*UVoxelProceduralMeshComponent* This = CastChecked<UVoxelProceduralMeshComponent>(InThis);\r\n\tCollector.AddReferencedObject( This->StaticMeshComponent, This );\r\n\tAddReferencedObjects( This, Collector );*/\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::Serialize(FArchive& Ar)\r\n{\r\n\t/*Serialize(Ar);\r\n\t\r\n\tAr << StaticMeshComponent;*/\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::PostLoad()\r\n{\r\n\t/*PostLoad();\r\n\r\n\t// Fix for old StaticMeshComponent components which weren\'t created with transactional flag.\r\n\tSetFlags( RF_Transactional );\r\n\r\n\t// BuildRenderData relies on the StaticMeshComponent having been post-loaded, so we ensure this by calling ConditionalPostLoad.\r\n\tcheck(StaticMeshComponent);\r\n\tStaticMeshComponent->ConditionalPostLoad();*/\r\n\t\r\n}\r\n\r\nbool UVoxelProceduralMeshComponent::IsNameStableForNetworking() const\r\n{\r\n\t// UVoxelProceduralMeshComponent is always persistent for the duration of a game session, and so can be considered to have a stable name\r\n\treturn true;\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials) const\r\n{\r\n\t\r\n}\r\n\r\nint32 UVoxelProceduralMeshComponent::GetNumMaterials() const\r\n{\r\n\treturn 0;\r\n}\r\n\r\nUMaterialInterface* UVoxelProceduralMeshComponent::GetMaterial(int32 MaterialIndex) const\r\n{\r\n\tUMaterialInterface* Material = nullptr;\r\n\t\r\n\treturn Material;\r\n}\r\n\r\nUMaterialInterface* UVoxelProceduralMeshComponent::GetMaterialFromCollisionFaceIndex(int32 FaceIndex, int32& SectionIndex) const\r\n{\r\n\tUMaterialInterface* Result = nullptr;\r\n\tSectionIndex = 0;\r\n\treturn Result;\r\n}\r\n\r\nbool UVoxelProceduralMeshComponent::IsPrecomputedLightingValid() const\r\n{\r\n\treturn false;\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::GetStreamingRenderAssetInfo(FStreamingTextureLevelContext& LevelContext, TArray<FStreamingRenderAssetPrimitiveInfo>& OutStreamingRenderAssets) const\r\n{\r\n\t\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::CreateRenderState_Concurrent(FRegisterComponentContext* Context)\r\n{\r\n\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::DestroyRenderState_Concurrent()\r\n{\r\n\t\r\n}\r\n\r\nFPrimitiveSceneProxy* UVoxelProceduralMeshComponent::CreateSceneProxy()\r\n{\r\n\treturn NULL;\r\n}\r\n\r\nbool UVoxelProceduralMeshComponent::ShouldRecreateProxyOnUpdateTransform() const\r\n{\r\n\treturn true;\r\n}\r\n\r\nFBoxSphereBounds UVoxelProceduralMeshComponent::CalcBounds(const FTransform& LocalToWorld) const\r\n{\r\n\treturn FBoxSphereBounds(LocalToWorld.GetLocation(), FVector::ZeroVector, 0.f);\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::InvalidateLightingCacheDetailed(bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly)\r\n{\r\n\t\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::PropagateLightingScenarioChange()\r\n{\r\n\t\r\n}\r\n\r\nbool UVoxelProceduralMeshComponent::GetLightMapResolution( int32& Width, int32& Height ) const\r\n{\r\n\treturn false;\r\n}\r\n\r\nint32 UVoxelProceduralMeshComponent::GetStaticLightMapResolution() const\r\n{\r\n\t/*int32 Width;\r\n\tint32 Height;\r\n\tGetLightMapResolution(Width, Height);\r\n\r\n\treturn FMath::Max<int32>(Width, Height);*/\r\n\treturn NULL;\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::GetLightAndShadowMapMemoryUsage( int32& LightMapMemoryUsage, int32& ShadowMapMemoryUsage ) const\r\n{\r\n\t/*return;*/\r\n}\r\n\r\n#if WITH_EDITOR\r\nvoid UVoxelProceduralMeshComponent::GetStaticLightingInfo(FStaticLightingPrimitiveInfo& OutPrimitiveInfo,const TArray<ULightComponent*>& InRelevantLights,const FLightingBuildOptions& Options)\r\n{\r\n\t/*check(0);*/\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::AddMapBuildDataGUIDs(TSet<FGuid>& InGUIDs) const\r\n{\r\n\t\r\n}\r\n\r\nvoid UVoxelProceduralMeshComponent::PostEditUndo()\r\n{\r\n\t/*PostEditUndo();*/\r\n}\r\n#endif // WITH_EDITOR\r\n\r\nbool UVoxelProceduralMeshComponent::GetPhysicsTriMeshData(struct FTriMeshCollisionData* CollisionData, bool InUseAllTriData)\r\n{\r\n\treturn false;\r\n}\r\n\r\nbool UVoxelProceduralMeshComponent::ContainsPhysicsTriMeshData(bool InUseAllTriData) const\r\n{\r\n\treturn false;\r\n}\r\n\r\nbool UVoxelProceduralMeshComponent::GenerateElements(bool bBuildRenderData)\r\n{\r\n\treturn false;\r\n}\r\n\r\nSet supported platforms to windows\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);