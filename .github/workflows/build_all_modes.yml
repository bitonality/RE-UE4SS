# This workflow automates the build process for all modes of the UE4SS project whenever a pull request is made.
# It dynamically calculates the build matrix based on the modes defined in the project and manages artifact uploads based on user selections in PR comments.


name: Build All Modes
permissions:
    contents: write
    pull-requests: write # For adding comments to PR.
on:
  pull_request:
    branches:
        - 'main'
    paths-ignore:
        - 'README.md'
        - 'docs/**'
        - 'docs-export/**'

# Ensure that rapid pushes to the pull request branch don't trigger this workflow multiple times.
# We only care about executing this workflow for that 'latest' commit on a PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Dynamically calculate which modes to build.
  # We also need to determine which modes should upload artifacts.
  calculate-matrix:
    name: Calculate job matrix
    runs-on: ubuntu-latest
    outputs:
      # JSON array with the following schema:
      # [
      #   {
      #     "mode": "Game__Shipping__Win64",
      #     "artifact": false
      #   },
      #   ...
      # ]
      matrix: ${{ steps.calculate-artifacts.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive # Clone the submodule so we can query xmake on the entire project.
          token: ${{ secrets.UEPSEUDO_PAT }}

        # We need handlebars to generate markdown for pull requests.
      - name: Install Handlebars
        run: npm install handlebars@4.7.8

        # Build modes are supplied by xmake, so we have to download and setup the xmake environment.
      - name: Setup xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: "2.9.2"
          actions-cache-folder: '.xmake-cache' # This auto-cache functionality only works on linux runners.

        # We allow users to interactively specify what artifacts to upload by using checkboxes in a PR comment.
        # Attempt to find an existing comment with the checkboxes.
      - name: Try to get Artifact Request
        if: ${{ startsWith(github.ref, 'refs/pull/') }}
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e
        id: get-artifact-request
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- START_ARTIFACT_LIST -->' # Hidden HTML comment indicates which PR comment has the checklist.

        # `xmake ci --dump=modes` returns a JSON array of all UE4SS modes that xmake knows how to build.
      - name: Get xmake Modes
        id: get-xmake-modes
        shell: pwsh
        run: |
          $modes = (xmake ci --dump=modes)
          echo "all_modes=$modes" >> $env:GITHUB_OUTPUT

        # We need to add the artifact checklist comment on the PR if we didn't find it earlier.
      - name: Add artifact checklist to PR
        uses: actions/github-script@v7
        if: ${{steps.get-artifact-request.outputs.comment-id == 0}}
        id: generate-markdown
        env:
          # Default modes that we want to upload artifacts for. These will be checked off in the PR comment.
          DEFAULT_MODES: '["Game__Debug__Win64","Game__Shipping__Win64"]'
          ALL_MODES: '${{steps.get-xmake-modes.outputs.all_modes}}'
          MARKDOWN_PATH: '${{ runner.temp }}/markdown/mode-list.md' # Save generated markdown to a file.
        with:
          result-encoding: string
          retries: 3 # Retry in case REST requests fail transitively.
          script: |
            const { DEFAULT_MODES, ALL_MODES, MARKDOWN_PATH } = process.env
            const utils = require("./.github/utils/utils.js");
            const handlebars = require('handlebars');
            const defaultModes = JSON.parse(DEFAULT_MODES);
            const allModes = JSON.parse(ALL_MODES).map(m => ({name: m, isEnabled: defaultModes.includes(m)}));
            const handlebarsPayload = {item: allModes, checklistName: "ARTIFACT_LIST", dropdown: "Artifacts To Upload"};
            utils.generateMarkdownFromTemplate("./.github/utils/markdown-templates/mode-checklist.hbs", handlebarsPayload, MARKDOWN_PATH, handlebars);
            return MARKDOWN_PATH; // Return the path to the file we wrote for future steps.

        # Add the special checklist selection comment to the PR.
        # This is how users can specify which modes should upload artifacts.
      - name: Create Checklist
        # Don't create the checklist if we were able to fetch it in the prior steps.
        if: ${{ startsWith(github.ref, 'refs/pull/') && steps.get-artifact-request.outputs.comment-id == 0 }}
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        with:
          issue-number: ${{ github.event.number }}
          body-path: '${{ steps.generate-markdown.outputs.result }}'
          edit-mode: replace
        
        # We now get the artifact selection checklist from comments since we've ensured it exists by now.
      - name: Find possible previous comment
        if: ${{ startsWith(github.ref, 'refs/pull/') }}
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e
        id: find-existing-comment
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- START_ARTIFACT_LIST -->' # Hidden HTML comment indicates which PR comment has the checklist.
        
        # We now compare the user selected artifacts with the xmake mode list to generate the finalized matrix.
      - name: Finalize Mode Matrix  
        uses: actions/github-script@v7
        id: calculate-artifacts
        env:
          ALL_MODES: '${{steps.get-xmake-modes.outputs.all_modes}}'
          # Passing the comment markdown body so we can parse the artifact checklist.
          REQUESTED_ARTIFACTS_COMMENT: '${{ steps.find-existing-comment.outputs.comment-body }}'
        with:
          result-encoding: string
          retries: 3 # Retry in case REST requests fail transitively.
          script: |
            const { ALL_MODES, REQUESTED_ARTIFACTS_COMMENT } = process.env;
            const utils = require("./.github/utils/utils.js");
            const checklistBody = utils.getHiddenTagsFromMarkdown("ARTIFACT_LIST", REQUESTED_ARTIFACTS_COMMENT);
            const requestedArtifacts = utils.getChecklistFromMarkdown(checklistBody);
            if(requestedArtifacts.size == 0) {
              core.warning("Unable to determine requested artifacts. No artifacts will be uploaded for this run.")
            }

            const modeSchema = JSON.parse(ALL_MODES).map(m => ({mode: m, artifact: requestedArtifacts.has(m) ? requestedArtifacts.get(m) : false}));
            core.setOutput('matrix', JSON.stringify(modeSchema));

  # Build UE4SS for each mode we received from the `calculate_matrix` job.
  build:
    name: ${{ matrix.mode }}
    needs: [ calculate-matrix ] # Ensure the mode/artifact matrix has been generated before we launch this job.
    strategy:
      fail-fast: false # Disable fast failing because we want to cancel other modes if one fails.
      matrix: 
        # Use our generated matrix to populate the `include` array.
        include: ${{ fromJSON(needs.calculate-matrix.outputs.matrix) }}
    # Run our reusable workflow for each mode in our matrix.
    uses: ./.github/workflows/build_ue4ss.yml
    secrets: inherit # Inherit secrets from this workflow to safely pass `secrets.UE4SS_PAT` to our reusable workflow.
    with:
      build-mode: ${{ matrix.mode }}
      commit-sha: ${{ github.sha }} # This is the SHA of the PR merge result, not the HEAD of the PR branch!
      should-upload-artifact: ${{ matrix.artifact }}
      # JSON that declares what files to upload for specific xmake targets.
      # The supplied format should be compatible with the output of `xmake ci --dump=targets`.
      # This specifies that the `UE4SS` target should upload its target file and symbol file.
      # Ex. UE4SS.dll + UE4SS.pdb
      artifact-list: '{"UE4SS": ["target", "symbol"]}'
      artifact-retention-days: 14

  # This job fetches artifacts created in previous jobs.
  # It then reports these artifacts to the pull request that triggered this workflow.
  report-artifacts:
    name: "Report results to pull request"
    runs-on: ubuntu-latest
    needs: [ build,calculate-matrix ]
    steps:
        # We need to check out the repository to load our custom scripts/markdown templates.
      - uses: actions/checkout@v4

        # We need handlebars to generate markdown for pull requests.
      - name: Install Handlebars
        run: npm install handlebars@4.7.8

      - name: Generate Artifact Report
        uses: actions/github-script@v7
        id: generate-markdown
        env:
          MARKDOWN_PATH: '${{ runner.temp }}/markdown/pr-comment.md'
        with:
          result-encoding: string
          retries: 3 # Retry in case REST requests fail transitively.
          script: |
            const { MARKDOWN_PATH } = process.env
            const script = require('./.github/utils/report-artifacts-to-pull-request.js');
            const handlebars = require('handlebars');
            await script({github, context}, MARKDOWN_PATH, handlebars);
            core.setOutput('artifact-report-path', MARKDOWN_PATH) // Return the path to the file we wrote for future steps.

      # Update the existing PR artifact report comment if it already exists.
      - name: Find possible previous comment
        if: ${{ startsWith(github.ref, 'refs/pull/') }}
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e
        id: findComment
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- PR_ARTIFACT -->' # Hidden comment acts as an indicator that we've already commented on this PR. 
      - name: Update comment
        # Don't update the comment if we didn't generate any artifacts.
        if: ${{ startsWith(github.ref, 'refs/pull/') }}
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        with:
          comment-id: ${{ steps.findComment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body-path: ${{ steps.generate-markdown.outputs.artifact-report-path }}}
          edit-mode: replace

         
